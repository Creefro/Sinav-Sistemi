<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        CuEMBHkAAAAASUVORK5CYII=
</value>
  </data>
</root>